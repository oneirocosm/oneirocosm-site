---
import MainLayout from '../../layouts/MainLayout.astro';

const pageName = "Moondunk 2022";
const pageDescription = "A retrospective on writing the dunk tank software for the Moonshot dunktank stream";
---

<MainLayout categorySelected='articles' pageName={ pageName } pageDescription={ pageDescription }>
<article class="prose lg:prose-xl dark:prose-dark">
<div class="todo">
# {pageName}

## A Dunk Tank?
About three weeks ago, I was talking to [Andrew](https://twitter.com/CohostSherms) about [Moonshot](https://twitter.com/MoonshotPods) stuff, and he brought up that he was planning on doing a stream with [Riley](https://twitter.com/RevRyeBread) to raise money for the podcast network.  The plan was that Riley would be sitting in a dunktank, and as people donated, it would eventually fill a bucket enough for it to flip over and dump water on them.  Since I have some embedded software knowledge, Andrew had a few questions; but I decided it would be fun to write some code to help them out with the process.

## The Hardware
At this point, Andrew already had some things planned out.  To start, he wanted the dunking mechanism to be a simple bucket with a rod passing through it.  As the bucket fills with water, the center of gravity raises along with it.  Then, once the center of gravity is higher than the rod, the bucket becomes unstable and flips upside-down&mdash;spilling all of the water out.  It's a fairly simple setup that worked really well for a couple reasons:
- It doesn't need a secondary mechanism to dunk&mdash;it automatically dunks on its own.  This means one fewer potential point of failure.  And only having three weeks to set it up, the fewer points of failure, the better.
- Unlike a separate dunking mechanism, this setup subjects the dunking trigger to other random influences; this includes the motion of the water, gusts of wind, a haphazard water baloon, etc.  This could be viewed as a negative if you want extremely predictable behavior, but a random element was somewhat desirable for this setup.

Aside from this, Andrew also already had a Raspberry Pi which could serve as a device that could control the water.  While I don't normally jump to a Pi for a task like this (it's kind of overkill), it certainly was capable of getting the task done, and since Andrew already had one, it made a lot of sense to use it.  And the extra features of the Pi ended up being really helpful at the end of the day.

<div class="m-auto w-3/4 h-auto">
    <figure>
    <img src="/assets/articles/moondunk-2022/device.jpg" alt="The Raspberry Pi safely within a tupperware container">
    <figcaption><div class="todo">The Raspberry Pi in its fancy water-resistant case.  Courtesy of [Andrew](https://twitter.com/CohostSherms)</div></figcaption>
    </figure>
</div>

For the connection from the Raspberry Pi to the hose, Andrew had already found a [Youtube video](https://www.youtube.com/watch?v=BVMeVGET_Ak) discussing how to connect a Solenoid valve to the Raspberry Pi GPIO pins.  It looked fairly straightforward, so Andrew decided to go ahead with that setup.  He ordered [this valve](https://www.amazon.com/Beduan-Electric-Solenoid-Normally-Colsed/dp/B07N6246YB) and [this relay](https://www.amazon.com/Electronics-Salon-Power-Expansion-Module-Raspberry/dp/B07CZL2SKN) and assembled that on his own.

<div class="m-auto w-3/4 h-auto">
    <figure>
    <img src="/assets/articles/moondunk-2022/solenoid.jpg" alt="The solenoid valve for dispensing water.">
    <figcaption><div class="todo">The solenoid valve connected to the Pi. Courtesy of [Andrew](https://twitter.com/CohostSherms)</div></figcaption>
    </figure>
</div>

And lastly, due to being in close proximity to water, the Pi had to be enclosed in some way.  So Andrew took a tupperware container and added some small holes for the wires that lead to the solenoid.  In order to prevent overheating, Andrew added a couple smaller holes and attached a fan to help the air circulate better.  Since the Pi doesn't produce that much heat, this ended up being sufficient.

<div class="m-auto w-3/4 h-auto">
    <figure>
    <img src="/assets/articles/moondunk-2022/device-vent.jpg" alt="The vent on the raspberry pi's waterproof container">
    <figcaption><div class="todo">Keeping your Raspberry Pi cool is important!  Courtesy of [Andrew](https://twitter.com/CohostSherms)</div></figcaption>
    </figure>
</div>

## A Software Prototype
Following this conversation, I decided to sit down and made a minimal version of the software.  The basic goal here was to get something that would be listening to a donation API; then, after a donation was received, it would set the appropriate pin on the Raspberry Pi low (low makes the water flow and high stops it) for a short period of time before stopping it.  It was only a small fraction of what the final application would look like, but it would be enough to show that things were heading in the right direction.

But before I actually wrote anything, I had to decide on which language I would use.  Ideally, it would be something fairly accessible, so it would be easy for Andrew to install on the Pi if it wasn't already there.  But also, it had to be something that had a package for interfacing with the Pi's GPIO pins.  Python was a first contender, but I am not an expert in donation APIs, and I couldn't find example code for those written in Python.  But I did find a lot of examples written in Javascript.  And it turned out that someone had already written a Javascript wrapper for the Raspberry Pi's GPIO pins, so that would be perfect.

Granted, there were still some issues.  For one, my Raspberry Pi didn't have all of the software I needed installed, and I was already using it for something else.  So, to start, I just wrote some code on my windows computer and would comment out the Pi-specific parts to make sure it worked.  It wasn't an elegant solution, but it worked well enough for this.  And with that, I was able to put together a small script that pulled from a Streamlabs test API and set a Raspberry Pi pin in response to that.  At this point, Andrew was waiting on parts to arrive, so I sat back for a little bit while we figured out some of the other details.

## A Small Test
A bit over a week later, I jumped in a Discord call with Andrew to help him install some things on his Pi and run a quick test.  It turned out that the Pi already had a recent version of Python installed (still necessary since the Javascript GPIO library was a wrapper), so that part was easy.  But, it didn't have Javascript installed and that was a little harder.  I eventually found a cURL command that would update the Pi's apt repositories to include recent version of Javascript, and then it was just a simple apt install.  We also had to install git, but apt made that very easy.  With these in place, I walked Andrew through the process of cloning the repo and installing npm packages.  And from there, we could do our test run.

It turned out, that I forgot to push a bug fix to the code, so it didn't work the first time, but after a quick git push from me and a git pull from Andrew, things were looking much better.  Messages were being received and the solenoid was opening and closing in response. That said, there were still a few issues.  I was struggling to figure out some details of the Streamlabs API and the timing function I tried to create wasn't working right.  Still, it was good progress and an important milestone for the project.

## A Choice of API
As I meantioned earlier, some of the things in the Streamlabs API weren't quite clear to me&mdash;for instance, I was having trouble determining the amount of money arriving in a test donations.  Furthermore, the more I looked into it, the more I ran into people having issues with the Streamlabs payment processing service.  It seemed that people were having a lot more luck with Streamelements, so I ended up sending a quick message to Andrew, and it turned out that was what Moonshot was already using for notification alerts.  A win-win all around really.

So, I decided to switch the API over to Streamelements instead.  And that also did take a bit of finagling, but I'm really glad I did in the end.  My only major complaint is that the JSON received from a Streamelements test donation is formatted completely differently from a real Streamelements donation&mdash;could have been disastrous if I hadn't seen messages talking about it in the Streamelements Discord.  Instead, it became a minor annoyance that I solved by writing a small piece of code that reformatted the test elements so they would end up looking like real ones.

## Timers in Async
Javascript is asynchronous, and while I have done some asynchronous programming, I wouldn't call myself well-versed in it by any means.  And that lead to some issues with setting up timers.  The easiest way to set up a timer in Javascript is to await a Promise that uses the setTimeout function to wait some period of time.  But, whenever I tried to do this, I kept running into errors that the function I was in wasn't declared as async.  This confused me since I thought I was outside of any functions, but in reality, the code I was writing was in an anonymous function, and I just didn't realize it.  Eventually, I got around to explicitly creating new functions, and that ended up resolving all of the timer issues that I had previously been running into.  In hindsight, I suppose it should have been obvious, but I guess it ended up working out in the end.

## Refactoring
With my previous bugs fixed, it was time to expand the application into something that would actually work on the day of the event instead of something that was just for a demo.

### A Donation Queue
First and foremost, the app absolutely needed a donation queue.  Without it, any donations that occured while water was being dispensed would be ignored.  So, if something like ten donations all arrived at once, and a donation queue was not in place, the donors would not be getting the water they paid for&mdash;and that was not an option.  Instead, a queue would be used to take advantage of Javascript's asynchronous capabilities.  One task would be to add new elements to a donation queue, and another would be to used to individually process those tasks.  That way, if multiple tasks came in at once, they would fill up the queue instead of being lost to the void.

In addition to this, I also added a minimum five second delay between the water turning off and turning back on.  This achieved a couple of things:
- It allowed the solenoid valve to cool down (dispensing water made it get hot)
- It made each donation feel distinct
- If I'd had time to add OBS graphics that hooked into the Pi, it would have given extra time for the two to sync up

### Currency Conversion
This was always in the back of my mind while developing the app, but it didn't really make sense to focus on it until now.  Basically, Streamelements allows donations in various currencies, and I needed to make sure that I was taking that into account.  Luckily, there are already several Javascript libraries that do the hard part for me.  I ended up using the currency-converter-lt library.  It was one of the first ones I came across and supported every currency listed on the Streamelements donation page.  All in all, I had no complaints with it.

### Debug Mode
As I mentioned earlier, developing on a device without the Raspberry Pi's GPIO interface was annoying because I had to comment out the code that used that interface before running tests.  Well, I eventually got fed up with that and decided to create a way around it.  Essentially, I created a debug mode that would create a mock version of the Gpio class and would just print to the console when the other functions were typically being used.  This made it as simple as changing a flag from false to true in order to switch between devices.

### Environment Variables
One other annoyance was having things like JWT tokens in the code.  Every time I had to commit, I had to delete the tokens so as not to leak them ... until one time where I accidentally didn't.  After freaking out for a couple minutes, I realized, I could just refresh my JWT token, so it wasn't that big of a deal.  Still, I wasn't going to have it happen again.  So, I ended up moving all of the configurable items to a .env file and loading them in with the Javascript dotenv package.  It saved a lot of trouble and made it easier to hide other details in the future.  The only downside was that I had to manually give the .env file to Andrew, but that was a lot easier than the alternative.

### A Persistent Donation Queue
One of my biggest worries prior to the event was that the app would crash and lose donations.  Unfortunately, the API I was using didn't have a way to recover donations that came in when the app was down.  But, I could at least manage to save the donations that had previously been stored in my queue.  To support this, I used the node-persist package as a way to add persistent storage to my app.  And then, I upgraded my queue to do these three things:
- If the persistent storage was not empty on initialization, the existing items would be added to the queue
- If an item was added to the queue, the persistent storage was updated as well
- If an item was removed from the queue, the persistent storage was updated as well

And in my tests, it worked really well.  If I queued up a bunch of test donations and turned off the Pi, they would immediately start working as soon as I turned it back on again.  In the end, it wasn't needed during the event, but I'm very glad I added it just in case.

### Countdown Timers
As a final added flare, I ended up modifying my "sleep timers" and made it so they would print out the amount of time remaining in addition to ticking down.  This was really interesting to me because I've never had to make recursive calls to an asynchronous function before.  It was a little bit of a challenge, but it ended up paying off and adding a neat bonus on top of everything.  As recursion tends to come with a risk of a stack overflow, I ran a couple tests to be sure that it wouldn't cause a problem, but even test donations of $1000 didn't cause an issue, so it was good enough for me.

## A Final Test
A few days before the event, I told Andrew that the code was ready, and we just needed to try out a couple tests on the device itself.  Since we had done a bunch of it before, it was pretty easy to git pull the new code and add the updates.  I gave Andrew the .env file, and we were ready to go.  Also, to be safe, I ran a test with a real donation this time, and it worked great!  It clicked on when the donation was received, and about a second later, clicked off.

From here, I talked with Andrew a little bit more about the features added, and he mentioned that he was a little disappointed he wouldn't have a monitor connected to the Pi during the event.  He hadn't initially considered the countdown timer and thought it would make a nice addition.  But he did have a chromebook that he could use as a tablet, and after some trial and error (which was solved by turning the Raspberry Pi off and on again), I walked him through setting up an ssh connection with the Pi.  So now, he could turn it on and off with his tablet and watch the output there.  So while I said a Raspberry Pi was a bit overkill, it made this aspect of it significantly better!

## Limitations
Before I discuss the event itself, there were a few things that I wanted to implement that I just didn't have the time for.  And while it is somewhat unfortunate I didn't get to them, they would absolutely make interesting future improvements:
- **Recovering Missed Events:** While this program is currently able to store events that were queued prior to a crash, it cannot continue queueing the events that came in while the program was down.  One way to address this would be to have the queueing performed by a separate program, but this adds complexity that I don't think is necessarily worth it.  Alternatively, on initialization, a connection could be made with an alternative Streamelements API that fetches recent donations.  In theory, this would be able to pull in all of the donations that were made while the program was down.  But there is also a downside to this&mdash;in order to avoid repeat donations, all previous donations would need to be cached in the persistent storage.  Then, only the events that were not previously cached could be collected.
- **Timestamp Filtering:**  As an add-on to recovering missed events, it becomes desirable to set a time range in which donations would be accepted.  This would prevent any "recent" events from a previous stream from being collected and cached by the program.  Only donations made between a pre-configured start time and end time would be added to the queue.
- **Clearing the Cache:** In the event that one stream ends with donations still cached, it may be desirable to clear that cache prior to starting the next event.  This is easily done by manually deleting the cache files, but in order to make it more user friendly, it would be worthwhile to add a command to the package.json file that handles this for the user.  Additionally, if one particular donation keeps causing the app to crash, it may be desirable to delete that single donation from the cache while leaving the others intact.  It's not a foolproof method as it means there are donations capable of crashing the application, but in a live event, it is the best method to try to salvage things quickly and move on.
- **OBS Integration:** Lastly, I really wanted the stream to display whose donation was making the water flow at a given time.  Because OBS was on a separate computer, it could make sense to use a separate program for that.  In that case, there would be a program such as nodecg running on the OBS computer.  Then the Pi could use websockets to send the info to nodecg program every time an event was scheduled.  This setup would give a lot of control over these events.  For instance, the Pi could wait for confirmation that the event was received prior to dunk to happen.  That said, it is rather complicated to implement as it involves two separate programs.  Instead, it may be easier to serve up some html from the Pi and try to access that directly from OBS.  This would remove the need for a second nodecg program and keeps everything custom being run in one place&mdash;that being said I've never actually done that and have no clue how well it would work in practice.

## The Actual Event
Finally, the day of the event arrived, and I was waiting for the start with anticipation.  Andrew and Riley didn't know exactly when they would be starting, and I kept worrying&mdash;did I make it too complicated?  Did something I coded break?  What if I screwed it up?  At one point, they mentioned technical issues and that only made my fears grow.

The only issue during setup that I was aware of was that the Pi was no longer connecting to Streamelements, but luckily this was just a wifi issue that was quickly resolved with the help of a very long ethernet cable&mdash;crisis successfully averted.  Also, apparently a deer tried to eat a camera, but I never did actually find out exactly what that meant.

And eventually, they started.  And everything worked amazingly!  The nozzle worked great when donations came in!  The bucket tipped when it got full enough!  And it was all around an incredibly fun time!!!  The only issue was that the bucket kept leaking, but it ended up being fairly minor in the grand scheme of things.

<div class="m-auto w-3/4 h-auto">
    <figure>
    <img src="/assets/articles/moondunk-2022/before-dunk.jpg" alt="Riley sits under the bucket in anticipation of the eventual dunk">
    <figcaption><div class="todo">Riley before a dunk.  Courtesy of [Sam](https://www.instagram.com/samshots227/)</todo></figcaption>
    </figure>
</div>

<div class="m-auto w-3/4 h-auto">
    <figure>
    <img src="/assets/articles/moondunk-2022/after-dunk01.jpg" alt="Riley gets doused with water as the bucket pours onto them.">
    <figcaption><div class="todo">Riley after a dunk.  Courtesy of [Sam](https://www.instagram.com/samshots227/)</div></figcaption>
    </figure>
</div>

There were some minor hiccups with the bucket leaking where the holes had been drilled for the rod that passed through it, but all things considered, that was a small issue compared to everything else being worked with.  And it could easily be remedied with a different bucket setup.

At the end of the day, we raised a grand total of $1885.12 USD for the network in just over two hours.  Which was more than I expected in my wildest dreams.  And we had a ton of fun during it!  And it was amazing to get to contibute to it.

If you do want to see everything in action, feel free to watch [the VOD](https://www.youtube.com/watch?v=sPUi5S27K94).

And if you want to take a look at the code in its entirety, you can find it [here](https://github.com/oneirocosm/moon-dunk-simple).

<div class="m-auto w-3/4 h-auto">
    <figure>
    <img src="/assets/articles/moondunk-2022/after-dunk02.jpg" alt="Riley gets doused with water again, but this time they point forward.">
    <figcaption><div class="todo">Photo courtesy of [Sam](https://www.instagram.com/samshots227/)</div></figcaption>
    </figure>
</div>

</div>
</article>
</MainLayout>