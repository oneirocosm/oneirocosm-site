<button id="theme-toggle" type="button">
  <svg
    id="theme-toggle-dark-icon"
    class="theme-icon--dark"
    fill="currentColor"
    viewBox="0 0 20 20"
    xmlns="http://www.w3.org/2000/svg"
  >
    <path d="M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z"
    ></path>
  </svg>
  <svg
    id="theme-toggle-light-icon"
    class="theme-icon--light"
    fill="currentColor"
    viewBox="0 0 20 20"
    xmlns="http://www.w3.org/2000/svg"
  >
    <path
      d="M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zm4 8a4 4 0 11-8 0 4 4 0 018 0zm-.464 4.95l.707.707a1 1 0 001.414-1.414l-.707-.707a1 1 0 00-1.414 1.414zm2.12-10.607a1 1 0 010 1.414l-.706.707a1 1 0 11-1.414-1.414l.707-.707a1 1 0 011.414 0zM17 11a1 1 0 100-2h-1a1 1 0 100 2h1zm-7 4a1 1 0 011 1v1a1 1 0 11-2 0v-1a1 1 0 011-1zM5.05 6.464A1 1 0 106.465 5.05l-.708-.707a1 1 0 00-1.414 1.414l.707.707zm1.414 8.486l-.707.707a1 1 0 01-1.414-1.414l.707-.707a1 1 0 011.414 1.414zM4 11a1 1 0 100-2H3a1 1 0 000 2h1z"
      fill-rule="evenodd"
      clip-rule="evenodd"></path>
  </svg>
</button>
<style>
  button {
    background-color: transparent;
    border: none;
    color: inherit;

    &:hover {
      color: var(--accent);
    }

    .theme-icon--light {
      width: 20px;
      height: 20px;
      display: var(--light-display);
    }

    .theme-icon--dark {
      width: 20px;
      height: 20px;
      display: var(--dark-display);
    }
  }
</style>

<script>
  class LightMode {
    icon: HTMLElement;

    constructor() {
      this.icon = document.getElementById(
        "theme-toggle-light-icon"
      ) as HTMLElement;
    }

    onEntry() {
      document.documentElement.classList.remove("dark");
      localStorage.setItem("color-theme", "light");
    }

    onExit() {}

    next() {
      return themeStates.dark;
    }
  }

  class DarkMode {
    icon: HTMLElement;

    constructor() {
      this.icon = document.getElementById(
        "theme-toggle-dark-icon"
      ) as HTMLElement;
    }

    onEntry() {
      document.documentElement.classList.add("dark");
      localStorage.setItem("color-theme", "dark");
    }

    onExit() {}

    next() {
      return themeStates.light;
    }
  }

  class StateMachine {
    themeCurrent: DarkMode | LightMode;
    toggleBtn: HTMLElement;

    constructor() {
      const themeLocalName = localStorage.getItem("color-theme");
      //console.log('here');

      if (themeLocalName) {
        const themeLocal = themeStates[themeLocalName];
        this.themeCurrent = themeLocal;
        themeLocal.onEntry();
      } else if (window.matchMedia("(prefers-color-scheme: dark)").matches) {
        themeStates.light.onExit();
        themeStates.dark.onEntry();
        this.themeCurrent = themeStates.dark;
        localStorage.setItem("color-theme", "dark");
      } else {
        themeStates.dark.onExit();
        themeStates.light.onEntry();
        this.themeCurrent = themeStates.light;
        localStorage.setItem("color-theme", "light");
      }

      this.toggleBtn = document.getElementById("theme-toggle") as HTMLElement;
      this.toggleBtn.addEventListener("click", () => this.update());
    }

    update() {
      const themeNext = this.themeCurrent.next();

      if (themeNext !== this.themeCurrent) {
        this.themeCurrent.onExit();
        this.themeCurrent = themeNext;
        this.themeCurrent.onEntry();
      }
    }
  }

  let themeStates: { [key: string]: DarkMode | LightMode } = {
    dark: new DarkMode(),
    light: new LightMode(),
  };

  new StateMachine();
</script>
